from stdimports import *


## Load AlexNet Model ##
"""
Loading an existing model (i.e., AlexNet here).
Only modify the last layer to match the target shape of the dataset.
"""
import torchvision.models as models

def load_alexnet(pretrained, require_grad, output_shape):
  """
    Input:
      pretrained: whether load the ImageNet pre-trained weights
      require_grad: set to true, if want to continue to train the model
                    (i.e, finetune the model)
      output_shape: number of neurons in the output layer
  """
  model = models.alexnet(pretrained=pretrained)
  for p in model.parameters():
    p.require_grad=require_grad
  num_ftrs = model.classifier[-1].in_features
  model.classifier[-1] = nn.Linear(num_ftrs, output_shape)
  return model


## Create a Transfer Learning Model ##
"""
This script creates a transfer learning model using AlexNet.
A transfer learning model may only use the feature extractor (or part of the
feature extractor) of a pre-trained model.
"""

class TF_AlexNet(nn.Module):
    """
    Inputs:
        feature_shape: the shape of the feature map generated by the feature
                       extractor (i.e., the Conv layers of AlexNet here)
        pretrained: whether load the ImageNet pre-trained weights
        require_grad: set to true, if want to continue to train the model
                      (i.e, finetune the model)
        output_shape: number of neurons in the output layer
    """
    def __init__(self,
                 feature_shape=(256,6,6),
                 pretrained=True,
                 requires_grad=True,
                 num_class=10):
        super(TF_AlexNet, self).__init__()
        # Image Feature Extraction
        self.ft_img = models.alexnet(pretrained=pretrained)
        self.ft_img_modules = list(self.ft_img.children())[:-1]
        self.ft_img = nn.Sequential(*self.ft_img_modules)
        for p in self.ft_img.parameters():
            p.requires_grad = requires_grad
        # ConvLayer for image feature transfer
        self.conv_img = nn.Sequential(
            nn.Conv2d(
                in_channels=feature_shape[0], # input height
                out_channels=feature_shape[0], # n_filters
                kernel_size=1,
            ),
            nn.BatchNorm2d(feature_shape[0]),
            nn.ReLU(),
        )
        # Build a new classifier
        self.flatten = nn.Flatten()
        in_shape = feature_shape[0] * feature_shape[1] * feature_shape[2]
        self.fc_1 = nn.Linear(in_shape, 1024)
        self.fc_2 = nn.Linear(1024, 512)
        self.out = nn.Linear(512, num_class)

    def forward(self, img):
        x = self.ft_img(img)
        x = self.conv_img(x)
        x = self.flatten(x)
        x = self.fc_1(x)
        x = self.fc_2(x)
        x = self.out(x)
        return x